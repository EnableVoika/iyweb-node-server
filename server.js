const express = require("express");
const app = express();

class SuccessRes {
  constructor(code, msg, data) {
    this.code = code;
    this.msg = msg;
    this.data = data;
  }
  code = 200;
  msg = "测试成功";
  data = null;
  flag = true;
}
class ErrorRes {
  constructor(code, msg) {
    this.code = code;
    this.msg = msg;
  }
  code = 500;
  msg = "服务器异常";
  data = null;
  flag = false;
}
// 跨域设置
//设置跨域访问（设置在所有的请求前面即可）
app.all("*", function (req, res, next) {
  //设置允许跨域的域名，*代表允许任意域名跨域
  res.header("Access-Control-Allow-Origin", "*");
  //允许的header类型
  res.header("Access-Control-Allow-Headers", "content-type");
  //跨域允许的请求方式
  res.header("Access-Control-Allow-Methods", "DELETE,PUT,POST,GET,OPTIONS");
  if (req.method == "OPTIONS") res.sendStatus(200); //让options尝试请求快速结束
  else next();
});

app.get("/test", function (req, res) {
  let sucRes = new SuccessRes();
  sucRes.data = [
    {
      name: "张三",
      age: 18,
    },
    {
      name: "李四",
      age: 19,
    },
  ];
  //   res.send(sucRes);
  res.send(sucRes);
});
// 获取用户信息
app.get("/query/userInfo", function (req, res) {
  const userList = [
    {
      accountNum: "A0062750",
      accountPwd: "123456",
      userName: "iy",
      userRealName: "关浩宇",
      alias: "翊",
      age: 21,
    },
    {
      accountNum: "965840507",
      accountPwd: "123456",
      userName: "校长",
      userRealName: "蒋盖石",
      alias: "中正",
      age: 108,
    },
  ];
  accountNum = req.query.accountNum;
  isExists = false;
  let userObj = {};
  userList.forEach((user) => {
    if (user.accountNum === accountNum) {
      isExists = true;
      userObj = user;
      return;
    }
  });
  if (isExists) {
    console.log("查询成功");
    res.send(new SuccessRes(200, "查询成功", userObj));
  } else {
    console.log("用户不存在");
    res.send(new ErrorRes(5001, "用户不存在"));
  }
});
// 获取个人博客的文章列表
app.get("/search/myblog/blogList", function (req, res) {
  const blogList = [
    {
      id: 1,
      title: "ASP.NET三层架构及短信发送案例（一）",
      content: `首先，我讲述的是ASP.NET三层架构。所谓ASP.NET三层架构主要包括：
      界面层（UI）：通俗说就是用户使用某系统时的操作界面。业务逻辑层(BLL)：
      对具体问题的操作、对数据层的操作。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。`,
      blogType: "计算机",
    },
    {
      id: 2,
      title: "ASP.NET三层架构及短信发送案例（二）",
      content: `在上一篇，简单说明了下ASP.NET的三层架构和案例准备。
      下来，就进入主题。如何利用模板，来生成三层框架。
      我们，需要一个工具，Codesmith。
      CodeSmith是一种语法类似于asp.net的基于模板的代码生成器，
      程序可以自定义模板，作为开发人员工具，
      它可以减少重复编码的劳动量，提高效率。
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。`,
      blogType: "计算机",
      accountNum: "A0062750",
    },
    {
      id: 3,
      title: "ASP.NET三层架构及短信发送案例（三）",
      content: `第三步，将生成的代码，拷贝到VS工程里面对应的位置。
      具体看操作。先拷贝Model类。选择Model类，右键添加类，
      这里主要是名称要和Codesmith生成的一样。
      然后只需将生成的代码粘贴到页面上即可。
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。`,
      blogType: "计算机",
      accountNum: "A0062750",
    },
    {
      id: 4,
      title: "ASP.NET三层架构及短信发送案例（四）",
      content: `接下来，要做的事情就是，实现短信发送功能了。
      要想在ASP.NET页面实现短信发送， 首先需要一个第三方的接口。
      市面上有很多大公司都提供短信业务，都是需要付费的，
      好多是一次性打包上千上万条卖，大家百度即可。
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。`,
      blogType: "计算机",
      accountNum: "A0062750",
    },
    {
      id: 5,
      title: "ASP.NET三层架构及短信发送案例（五）",
      content: `前几天，我们已经完成了短信发送的案例。
      因为时间关系，有些功能没有补充。在这里一并说了。
      功能一，网页查询功能的实现。 首先，我们先看下本系统中，所采用的控件。
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。`,
      blogType: "计算机",
      accountNum: "A0062750",
    },
    {
      id: 6,
      title: "The Doctor Who",
      content: `神秘博士`,
      blogType: "小说",
      accountNum: "A0062750",
    },
    {
      id: 7,
      title: "测试小说",
      content: `啪啪啪啪啪`,
      blogType: "小说",
      accountNum: "A0062750",
    },
  ];
  let respList = [];
  if ("" === req.query.accountNum) {
    res.send(respList);
    return;
  }
  blogList.forEach((blog) => {
    if ("" !== req.query.blogType) {
      if (req.query.blogType === blog.blogType) {
        respList.push(blog);
      }
    }else {
      respList = blogList
    }
  });
  res.send(respList);
});

// 获取个人博客的单个文章详细内容
app.get("/query/blog/blogContent", function (req, res) {
  const blogList = [
    {
      id: 1,
      title: "ASP.NET三层架构及短信发送案例（一）",
      content: `一、首先，简单讲述下ASP.NET三层架构。 所谓ASP.NET三层架构主要包括：
      界面层（UI）：通俗说就是用户使用某系统时的操作界面。
      业务逻辑层(BLL)：对具体问题的操作、对数据层的操作。
      数据访问层（DAL）：对数据库进行操作，主要是进行数据的增、删、改、查。
      当然，有些细心的朋友可能会说，不是还有Model层吗。
      其实Model并不能算是一个层，它只是一个实体类，可有可无。
      Model的主要作用是传递数据。具体的取舍，主要看你项目的复杂程度，简单则可不用。
      我画一个草图，来说明他们之间的关系。
      二、下面，结合具体的案例，先做些准备工作。 先看下我们的案例，用Visual
      Studio 2012以及SQL Server2008R2开发的。 使用之前，得先还原数据库。
      打开SQL Server，在数据库上右键-》选择还原数据库。
      根据图所示，选择本地要还原的库。 一路确定。
      刷新，即可看到还原的数据库。 完成后，让我们先在VS中打开工程看一下。
      可以看到，已经搭建好了ASP.NET三层架构。
      在使用之前，先双击打开IDBO.xml文件，修改数据库连接字符串。
      服务器名获取，看下图。
      sa账户一般是数据库默认开启的，未开启请自行设置。进状态可以启用sa账户。
      填写完成后，就可以运行系统了。 默认管理员账户：admin 密码：123456
      登录成功后，就是这个样子。 一、首先，简单讲述下ASP.NET三层架构。
      所谓ASP.NET三层架构主要包括：
      界面层（UI）：通俗说就是用户使用某系统时的操作界面。
      业务逻辑层(BLL)：对具体问题的操作、对数据层的操作。
      数据访问层（DAL）：对数据库进行操作，主要是进行数据的增、删、改、查。
      当然，有些细心的朋友可能会说，不是还有Model层吗。
      其实Model并不能算是一个层，它只是一个实体类，可有可无。
      Model的主要作用是传递数据。具体的取舍，主要看你项目的复杂程度，简单则可不用。
      我画一个草图，来说明他们之间的关系。
      二、下面，结合具体的案例，先做些准备工作。 先看下我们的案例，用Visual
      Studio 2012以及SQL Server2008R2开发的。 使用之前，得先还原数据库。
      打开SQL Server，在数据库上右键-》选择还原数据库。
      根据图所示，选择本地要还原的库。 一路确定。
      刷新，即可看到还原的数据库。 完成后，让我们先在VS中打开工程看一下。
      可以看到，已经搭建好了ASP.NET三层架构。
      在使用之前，先双击打开IDBO.xml文件，修改数据库连接字符串。
      服务器名获取，看下图。
      sa账户一般是数据库默认开启的，未开启请自行设置。进状态可以启用sa账户。
      填写完成后，就可以运行系统了。 默认管理员账户：admin 密码：123456
      登录成功后，就是这个样子。一、首先，简单讲述下ASP.NET三层架构。
      所谓ASP.NET三层架构主要包括：
      界面层（UI）：通俗说就是用户使用某系统时的操作界面。
      业务逻辑层(BLL)：对具体问题的操作、对数据层的操作。
      数据访问层（DAL）：对数据库进行操作，主要是进行数据的增、删、改、查。
      当然，有些细心的朋友可能会说，不是还有Model层吗。
      其实Model并不能算是一个层，它只是一个实体类，可有可无。
      Model的主要作用是传递数据。具体的取舍，主要看你项目的复杂程度，简单则可不用。
      我画一个草图，来说明他们之间的关系。
      二、下面，结合具体的案例，先做些准备工作。 先看下我们的案例，用Visual
      Studio 2012以及SQL Server2008R2开发的。 使用之前，得先还原数据库。
      打开SQL Server，在数据库上右键-》选择还原数据库。
      根据图所示，选择本地要还原的库。 一路确定。
      刷新，即可看到还原的数据库。 完成后，让我们先在VS中打开工程看一下。
      可以看到，已经搭建好了ASP.NET三层架构。
      在使用之前，先双击打开IDBO.xml文件，修改数据库连接字符串。
      服务器名获取，看下图。
      sa账户一般是数据库默认开启的，未开启请自行设置。进状态可以启用sa账户。
      填写完成后，就可以运行系统了。 默认管理员账户：admin 密码：123456
      登录成功后，就是这个样子。一、首先，简单讲述下ASP.NET三层架构。
      所谓ASP.NET三层架构主要包括：
      界面层（UI）：通俗说就是用户使用某系统时的操作界面。
      业务逻辑层(BLL)：对具体问题的操作、对数据层的操作。
      数据访问层（DAL）：对数据库进行操作，主要是进行数据的增、删、改、查。
      当然，有些细心的朋友可能会说，不是还有Model层吗。
      其实Model并不能算是一个层，它只是一个实体类，可有可无。
      Model的主要作用是传递数据。具体的取舍，主要看你项目的复杂程度，简单则可不用。
      我画一个草图，来说明他们之间的关系。
      二、下面，结合具体的案例，先做些准备工作。 先看下我们的案例，用Visual
      Studio 2012以及SQL Server2008R2开发的。 使用之前，得先还原数据库。
      打开SQL Server，在数据库上右键-》选择还原数据库。
      根据图所示，选择本地要还原的库。 一路确定。
      刷新，即可看到还原的数据库。 完成后，让我们先在VS中打开工程看一下。
      可以看到，已经搭建好了ASP.NET三层架构。
      在使用之前，先双击打开IDBO.xml文件，修改数据库连接字符串。
      服务器名获取，看下图。
      sa账户一般是数据库默认开启的，未开启请自行设置。进状态可以启用sa账户。
      填写完成后，就可以运行系统了。 默认管理员账户：admin 密码：123456
      登录成功后，就是这个样子。`,
      blogType: "计算机",
      accountNum: "A0062750",
    },
    {
      id: 2,
      title: "ASP.NET三层架构及短信发送案例（二）",
      content: `一、首先，简单讲述下ASP.NET三层架构。 所谓ASP.NET三层架构主要包括：
      界面层（UI）：通俗说就是用户使用某系统时的操作界面。
      业务逻辑层(BLL)：对具体问题的操作、对数据层的操作。
      数据访问层（DAL）：对数据库进行操作，主要是进行数据的增、删、改、查。
      当然，有些细心的朋友可能会说，不是还有Model层吗。
      其实Model并不能算是一个层，它只是一个实体类，可有可无。
      Model的主要作用是传递数据。具体的取舍，主要看你项目的复杂程度，简单则可不用。
      我画一个草图，来说明他们之间的关系。
      二、下面，结合具体的案例，先做些准备工作。 先看下我们的案例，用Visual
      Studio 2012以及SQL Server2008R2开发的。 使用之前，得先还原数据库。
      打开SQL Server，在数据库上右键-》选择还原数据库。
      根据图所示，选择本地要还原的库。 一路确定。
      刷新，即可看到还原的数据库。 完成后，让我们先在VS中打开工程看一下。
      可以看到，已经搭建好了ASP.NET三层架构。
      在使用之前，先双击打开IDBO.xml文件，修改数据库连接字符串。
      服务器名获取，看下图。
      sa账户一般是数据库默认开启的，未开启请自行设置。进状态可以启用sa账户。
      填写完成后，就可以运行系统了。 默认管理员账户：admin 密码：123456
      登录成功后，就是这个样子。 一、首先，简单讲述下ASP.NET三层架构。
      所谓ASP.NET三层架构主要包括：
      界面层（UI）：通俗说就是用户使用某系统时的操作界面。
      业务逻辑层(BLL)：对具体问题的操作、对数据层的操作。
      数据访问层（DAL）：对数据库进行操作，主要是进行数据的增、删、改、查。
      当然，有些细心的朋友可能会说，不是还有Model层吗。
      其实Model并不能算是一个层，它只是一个实体类，可有可无。
      Model的主要作用是传递数据。具体的取舍，主要看你项目的复杂程度，简单则可不用。
      我画一个草图，来说明他们之间的关系。
      二、下面，结合具体的案例，先做些准备工作。 先看下我们的案例，用Visual
      Studio 2012以及SQL Server2008R2开发的。 使用之前，得先还原数据库。
      打开SQL Server，在数据库上右键-》选择还原数据库。
      根据图所示，选择本地要还原的库。 一路确定。
      刷新，即可看到还原的数据库。 完成后，让我们先在VS中打开工程看一下。
      可以看到，已经搭建好了ASP.NET三层架构。
      在使用之前，先双击打开IDBO.xml文件，修改数据库连接字符串。
      服务器名获取，看下图。
      sa账户一般是数据库默认开启的，未开启请自行设置。进状态可以启用sa账户。
      填写完成后，就可以运行系统了。 默认管理员账户：admin 密码：123456
      登录成功后，就是这个样子。一、首先，简单讲述下ASP.NET三层架构。
      所谓ASP.NET三层架构主要包括：
      界面层（UI）：通俗说就是用户使用某系统时的操作界面。
      业务逻辑层(BLL)：对具体问题的操作、对数据层的操作。
      数据访问层（DAL）：对数据库进行操作，主要是进行数据的增、删、改、查。
      当然，有些细心的朋友可能会说，不是还有Model层吗。
      其实Model并不能算是一个层，它只是一个实体类，可有可无。
      Model的主要作用是传递数据。具体的取舍，主要看你项目的复杂程度，简单则可不用。
      我画一个草图，来说明他们之间的关系。
      二、下面，结合具体的案例，先做些准备工作。 先看下我们的案例，用Visual
      Studio 2012以及SQL Server2008R2开发的。 使用之前，得先还原数据库。
      打开SQL Server，在数据库上右键-》选择还原数据库。
      根据图所示，选择本地要还原的库。 一路确定。
      刷新，即可看到还原的数据库。 完成后，让我们先在VS中打开工程看一下。
      可以看到，已经搭建好了ASP.NET三层架构。
      在使用之前，先双击打开IDBO.xml文件，修改数据库连接字符串。
      服务器名获取，看下图。
      sa账户一般是数据库默认开启的，未开启请自行设置。进状态可以启用sa账户。
      填写完成后，就可以运行系统了。 默认管理员账户：admin 密码：123456
      登录成功后，就是这个样子。一、首先，简单讲述下ASP.NET三层架构。
      所谓ASP.NET三层架构主要包括：
      界面层（UI）：通俗说就是用户使用某系统时的操作界面。
      业务逻辑层(BLL)：对具体问题的操作、对数据层的操作。
      数据访问层（DAL）：对数据库进行操作，主要是进行数据的增、删、改、查。
      当然，有些细心的朋友可能会说，不是还有Model层吗。
      其实Model并不能算是一个层，它只是一个实体类，可有可无。
      Model的主要作用是传递数据。具体的取舍，主要看你项目的复杂程度，简单则可不用。
      我画一个草图，来说明他们之间的关系。
      二、下面，结合具体的案例，先做些准备工作。 先看下我们的案例，用Visual
      Studio 2012以及SQL Server2008R2开发的。 使用之前，得先还原数据库。
      打开SQL Server，在数据库上右键-》选择还原数据库。
      根据图所示，选择本地要还原的库。 一路确定。
      刷新，即可看到还原的数据库。 完成后，让我们先在VS中打开工程看一下。
      可以看到，已经搭建好了ASP.NET三层架构。
      在使用之前，先双击打开IDBO.xml文件，修改数据库连接字符串。
      服务器名获取，看下图。
      sa账户一般是数据库默认开启的，未开启请自行设置。进状态可以启用sa账户。
      填写完成后，就可以运行系统了。 默认管理员账户：admin 密码：123456
      登录成功后，就是这个样子。`,
      blogType: "计算机",
      accountNum: "A0062750",
    },
    {
      id: 3,
      title: "ASP.NET三层架构及短信发送案例（三）",
      content: `第三步，将生成的代码，拷贝到VS工程里面对应的位置。
      具体看操作。先拷贝Model类。选择Model类，右键添加类，
      这里主要是名称要和Codesmith生成的一样。
      然后只需将生成的代码粘贴到页面上即可。
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。`,
    },
    {
      id: 4,
      title: "ASP.NET三层架构及短信发送案例（四）",
      content: `接下来，要做的事情就是，实现短信发送功能了。
      要想在ASP.NET页面实现短信发送， 首先需要一个第三方的接口。
      市面上有很多大公司都提供短信业务，都是需要付费的，
      好多是一次性打包上千上万条卖，大家百度即可。
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。`,
      blogType: "计算机",
      accountNum: "A0062750",
    },
    {
      id: 5,
      title: "ASP.NET三层架构及短信发送案例（五）",
      content: `前几天，我们已经完成了短信发送的案例。
      因为时间关系，有些功能没有补充。在这里一并说了。
      功能一，网页查询功能的实现。 首先，我们先看下本系统中，所采用的控件。
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。数据访问层（DAL）：对数据库进行操作，
      主要是进行数据的增、删、改、查。`,
      blogType: "计算机",
      accountNum: "A0062750",
    },
    {
      id: 6,
      title: "The Doctor Who",
      content: `神秘博士`,
      blogType: "小说",
      accountNum: "A0062750",
    },
    {
      id: 7,
      title: "测试小说",
      content: `啪啪啪啪啪`,
      blogType: "小说",
      accountNum: "A0062750",
    },
  ];
  console.log(req.query);
  let content = {};
  blogList.forEach((x) => {
    if (req.query.id == x.id) {
      content = x;
    }
  });
  res.send(content);
});

app.listen(5001, (err) => {
  if (!err) {
    console.log("服务器启动成功");
  }
});
